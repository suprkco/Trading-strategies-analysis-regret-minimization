Mon code ne fonctione pas, l'erreur est :
"tournoi.py", line 27, in jouer prix, qtes = Marché.simuler_ordres(ordres) TypeError: simuler_ordres() missing 1 required positional argument: 'ordres'"
réecris la fonction qui ne marche pas

''''''''''''''''''''
from marché import Marché
from population import Population
from tournoi import Tournoi

class Simulation:
    def __init__(self, nb_generations, nb_tours, nb_joueurs, nb_strategies):
        self.nb_generations = nb_generations
        self.nb_tours = nb_tours
        self.nb_joueurs = nb_joueurs
        self.nb_strategies = nb_strategies
        self.marche = Marché(self.nb_tours)
        self.population = Population(self.nb_joueurs, self.nb_strategies)
        self.resultats = []

    def run(self):
        for i in range(self.nb_generations):
            for j in range(self.nb_tours):
                tournoi = Tournoi(self.marche, self.population.get_strategies(), self.nb_tours, self.nb_joueurs)
                tournoi.jouer()
            self.population.selectionner()
            self.resultats.append(self.population.get_meilleure_strategie())

sim = Simulation(10, 7, 100, 10)
sim.run()
''''''''''''''''''''
import datetime
import random
import time
import yfinance as yf

def str_time_prop(start, end, time_format, prop):
    stime = time.mktime(time.strptime(start, time_format))
    etime = time.mktime(time.strptime(end, time_format))
    ptime = stime + prop * (etime - stime)
    return time.strftime(time_format, time.localtime(ptime))


def random_date(start, end, prop):
    return str_time_prop(start, end, '%m/%d/%Y %I:%M %p', prop)

COMPANIES = [ 'AAPL', 'MFSF', 'MSFT', 'AMZN', 'GOOG' ]

class Marché:
    def __init__(self, nb_tours):
        #
        self.entreprise = random.choice(COMPANIES)
        
        # récupere les données d'un marché aléatoire dans les 30 à 30- nb_tours derniers jours
        self.endSampleDate = (datetime.datetime.now() - datetime.timedelta(days=nb_tours)).strftime('%m/%d/%Y %I:%M %p')
        self.startSampleDate = (datetime.datetime.now() - datetime.timedelta(days=30)).strftime('%m/%d/%Y %I:%M %p')
        self.randomizedDate = datetime.datetime.strptime(random_date(self.startSampleDate, self.endSampleDate, random.random()), '%m/%d/%Y %I:%M %p') # Date aléatoire de début de simulation
        self.endSimulationDate = self.randomizedDate + datetime.timedelta(days=nb_tours) # Date de fin de simulation
        self.full_prix = yf.download(self.entreprise, start=self.randomizedDate, end=self.endSimulationDate, interval='1m').to_dict('records')
        
        self.prix_actuel = 0
        self.avancement = 0 # Avancement dans la liste de stock
        self.historique_prix = {}
    
    def choix_entreprise(self):
        self.entreprise = random.choice(COMPANIES)
    
    def get_prix_actuel(self):
        return self.prix_actuel
    
    def set_prix_actuel(self, nouveau_prix):
        self.historique_prix.append(self.prix_actuel)
        self.prix_actuel = self.full_prix.iloc[self.avancement]
        self.avancement += 1
    
    def get_historique_prix(self):
        return self.historique_prix
    
    def simuler_ordres(self, ordres):
        for ordre in ordres:
            prix_actuel = self.get_prix_actuel()
            if ordre['type'] == 'achat' and ordre['prix'] >= prix_actuel:
                ordre['statut'] = 'refusé'
            elif ordre['type'] == 'vente' and ordre['prix'] <= prix_actuel:
                ordre['statut'] = 'refusé'
            else:
                ordre['statut'] = 'accepté'
                self.set_prix_actuel(ordre['prix'])
''''''''''''''''''''
from joueur import Joueur
import random

class Population:
    def __init__(self, taille, nb_strategies):
        self.taille = taille
        self.nb_strategies = nb_strategies
        self.strategies = []
        self.meilleures_strategies = []
        self.individus = []
        self.init_strategies()

    def get_taille(self):
        return self.taille

    def get_strategies(self):
        return self.strategies

    def ajouter_strategie(self, strategie):
        self.strategies.append(strategie)

    def init_strategies(self):
        # Initialise les strategies de la population avec des joueurs aléatoires
        for i in range(self.taille):
            nomJoueur = "Joueur " + str(i)
            joueur = Joueur(nomJoueur, self.nb_strategies, self.strategies)
            self.ajouter_strategie(joueur)

    def jouer_tous(self, marché):
        # Joue toutes les strategies de la population sur le marché
        for strat in self.strategies:
            for joueur in strat.get_joueurs():
                ordres = joueur.generer_ordres(marché)
                marché.execute_ordres(ordres, joueur.get_nom())
                joueur.ajouter_rendement(marché.get_prix_actuel())

    def trier_strategies(self):
        # Trie les strategies de la population par ordre décroissant de rendement moyen de tous les joueurs dans chaque stratégie
        self.strategies = sorted(self.strategies, key=lambda x: sum([joueur.get_rendements()[-1] for joueur in x.get_joueurs()])/len(x.get_joueurs()), reverse=True)

    def selectionner(self):
        self.trier_strategies()
        self.meilleures_strategies = self.strategies[:int(self.taille/2)]
        self.strategies = []
        for strat in self.meilleures_strategies:
            self.strategies.append(strat)
            clone = strat.clone()
            clone.muter()
            self.strategies.append(clone)
            
    def get_meilleure_strategie(self):
        self.trier_strategies()
        return self.strategies[0]

    def selectionner_meilleures_strategies(self, pourcentage):
        # Sélectionne les meilleures strategies de la population
        nb_strategies = int(self.taille * pourcentage)
        self.meilleures_strategies = self.strategies[:nb_strategies]
        self.individus = [strat for strat in self.meilleures_strategies]

    def reproduire(self):
        # Reproduction des meilleures strategies pour créer une nouvelle génération
        nouvelle_generation = Population(self.taille, self.nb_strategies)
        for i in range(self.taille):
            parents = random.sample(self.meilleures_strategies, 2)
            enfant = self.croisement(parents[0], parents[1])
            nouvelle_generation.ajouter_strategie(enfant)
        return nouvelle_generation

    def croisement(self, parent1, parent2):
        # Recombinaison d'un point (single-point crossover)
        point_de_croisement = random.randint(1, self.nb_strategies-1)
        enfant_strategie = parent1.get_strategie()[:point_de_croisement] + parent2.get_strategie()[point_de_croisement:]
        enfant = Joueur(parent1.get_nom(), self.nb_strategies)
        enfant.set_strategie(enfant_strategie)
        return enfant
''''''''''''''''''''
import itertools
import random

from marché import Marché


class Tournoi:
    def __init__(self, marché, population, nb_matchs, taille_tournoi):
        self.marché = marché
        self.population = population # liste de stratégies
        self.nb_matchs = nb_matchs # nombre de matchs par groupe
        self.taille_tournoi = taille_tournoi # nombre de joueurs par groupe
        self.individus = [strat for strat in self.population]

    def jouer(self):
        scores = {strat: 0 for strat in self.population}
        for i in range(self.nb_matchs):
            random.shuffle(self.population)
            groupes = [self.population[j:j + self.taille_tournoi]
                       for j in range(0, len(self.population), self.taille_tournoi)]
            for groupe in groupes:
                matchs = itertools.combinations(groupe, 2)
                for s1, s2 in matchs:
                    ordres1 = s1.generer_ordres(self.marché)
                    ordres2 = s2.generer_ordres(self.marché)
                    ordres = ordres1 + ordres2
                    prix, qtes = Marché.simuler_ordres(ordres)
                    resultat1 = s1.evaluer_match(prix, qtes)
                    resultat2 = s2.evaluer_match(prix, qtes)
                    scores[s1] += resultat1
                    scores[s2] += resultat2
        self.scores = scores

    def get_scores(self):
        return self.scores

    def get_classement(self):
        classement = sorted(self.population, key=lambda s: self.scores[s], reverse=True)
        return classement

    def reset(self):
        self.scores = {strat: 0 for strat in self.population}
        
    def __iter__(self):
        return iter(self.individus)
''''''''''''''''''''
import random
from stratégie import Stratégie

class Joueur:
    def __init__(self, nom, nb_strategies, strategies):
        self.nom = nom
        self.nb_strategies = nb_strategies
        self.strategies = strategies
        self.rendements = []
        if strategies:
            self.strategie = random.choice(self.strategies)
        else:
            self.strategie = None

    def get_nom(self):
        return self.nom

    def ajouter_rendement(self, rendement):
        self.rendements.append(rendement)

    def get_rendements(self):
        return self.rendements

    def changer_strategie(self):
        if self.strategies:
            self.strategie = random.choice(self.strategies)

    def generer_ordres(self, marché):
        ordres = []
        if self.strategie == "strategie1":
            # ...
            pass
        elif self.strategie == "strategie2":
            # ...
            pass
        return ordres
